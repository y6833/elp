{
  "id": "webpack-custom-loader",
  "title": "🔧 自定义Loader开发 - 深入Webpack内核",
  "description": "Loader是Webpack的核心机制，它们将各种文件转换为JavaScript模块。想要真正掌握Webpack，就必须理解Loader的工作原理。这一关将带你从零开发两个实用的Loader：Markdown转HTML的loader和添加文件头注释的loader。",
  "difficulty": "高级",
  "estimatedTime": "45分钟",
  "category": "webpack",
  "scenario": "你的项目有特殊需求：需要直接导入Markdown文件作为HTML，还需要为所有JS文件自动添加版权信息。现有的Loader都不能满足需求，你需要开发自定义Loader来解决这些问题。",
  "learningObjectives": [
    "🔍 深入理解Loader的工作原理和生命周期",
    "📝 开发Markdown转HTML的同步Loader",
    "🏷️ 开发添加文件头注释的异步Loader",
    "⚙️ 掌握Loader选项配置和验证机制"
  ],
  "tasks": [
    {
      "id": "create-markdown-loader",
      "title": "📝 任务1：开发Markdown转HTML的Loader",
      "description": "创建一个同步Loader，将Markdown文件转换为HTML字符串，让你可以直接在JS中导入Markdown内容。",
      "specificSteps": [
        {
          "step": 1,
          "action": "创建loaders/markdown-loader.js文件",
          "code": "const marked = require('marked');\nconst loaderUtils = require('loader-utils');\n\n// Markdown Loader - 同步版本\nmodule.exports = function(source) {\n  // 获取loader选项\n  const options = loaderUtils.getOptions(this) || {};\n  \n  // 配置marked选项\n  const markedOptions = {\n    gfm: true, // 启用GitHub风格Markdown\n    breaks: options.breaks || false,\n    sanitize: options.sanitize || false\n  };\n  \n  // 转换Markdown为HTML\n  const html = marked(source, markedOptions);\n  \n  // 返回JavaScript模块代码\n  return `export default ${JSON.stringify(html)};`;\n};",
          "explanation": "这个Loader将Markdown源码转换为HTML，并包装成ES模块"
        },
        {
          "step": 2,
          "action": "在webpack.config.js中配置Loader",
          "code": "module.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.md$/,\n        use: {\n          loader: './loaders/markdown-loader.js',\n          options: {\n            breaks: true,\n            sanitize: false\n          }\n        }\n      }\n    ]\n  }\n};",
          "explanation": "配置Webpack使用自定义Loader处理.md文件"
        }
      ],
      "loaderFeatures": {
        "同步处理": "直接返回转换结果，适合简单的文件转换",
        "选项支持": "通过loader-utils获取用户配置",
        "模块包装": "将转换结果包装成JavaScript模块",
        "错误处理": "可以抛出异常来报告转换错误"
      },
      "expectedResult": "可以在JS中import Markdown文件，获得HTML字符串",
      "validation": {
        "type": "file-exists",
        "files": ["loaders/markdown-loader.js"]
      }
    },
    {
      "id": "create-banner-loader",
      "title": "🏷️ 任务2：开发文件头注释Loader",
      "description": "创建一个异步Loader，为JavaScript文件自动添加版权信息或其他头部注释。",
      "specificSteps": [
        {
          "step": 1,
          "action": "创建loaders/banner-loader.js文件",
          "code": "const loaderUtils = require('loader-utils');\nconst fs = require('fs');\nconst path = require('path');\n\n// Banner Loader - 异步版本\nmodule.exports = function(source) {\n  // 标记为异步Loader\n  const callback = this.async();\n  \n  // 获取选项\n  const options = loaderUtils.getOptions(this) || {};\n  \n  // 生成banner内容\n  const generateBanner = () => {\n    const now = new Date();\n    const banner = options.banner || `/**\\n * Generated by webpack\\n * Date: ${now.toISOString()}\\n * File: ${this.resourcePath}\\n */\\n\\n`;\n    \n    return banner;\n  };\n  \n  // 如果有banner文件，异步读取\n  if (options.bannerFile) {\n    const bannerPath = path.resolve(this.context, options.bannerFile);\n    \n    fs.readFile(bannerPath, 'utf8', (err, bannerContent) => {\n      if (err) {\n        return callback(err);\n      }\n      \n      const result = bannerContent + '\\n\\n' + source;\n      callback(null, result);\n    });\n  } else {\n    // 同步生成banner\n    const banner = generateBanner();\n    const result = banner + source;\n    callback(null, result);\n  }\n};",
          "explanation": "异步Loader使用callback来返回结果，支持文件读取等异步操作"
        },
        {
          "step": 2,
          "action": "配置Banner Loader",
          "code": "{\n  test: /\\.js$/,\n  exclude: /node_modules/,\n  use: [\n    {\n      loader: './loaders/banner-loader.js',\n      options: {\n        banner: '/* Copyright 2024 My Company */\\n',\n        // bannerFile: './banner.txt' // 可选：从文件读取banner\n      }\n    },\n    'babel-loader' // banner-loader在babel-loader之前执行\n  ]\n}",
          "explanation": "Banner Loader通常放在其他Loader之前，为源文件添加头部信息"
        }
      ],
      "asyncLoaderFeatures": {
        "异步处理": "使用this.async()获取callback函数",
        "错误处理": "通过callback(error)报告错误",
        "文件读取": "可以读取外部文件作为banner内容",
        "上下文信息": "可以访问this.resourcePath等上下文信息"
      },
      "expectedResult": "所有JS文件都会自动添加指定的头部注释",
      "validation": {
        "type": "file-exists",
        "files": ["loaders/banner-loader.js"]
      }
    },
    {
      "id": "test-custom-loaders",
      "title": "🧪 任务3：测试自定义Loader",
      "description": "创建测试文件来验证自定义Loader的功能是否正常。",
      "specificSteps": [
        {
          "step": 1,
          "action": "创建测试用的Markdown文件",
          "code": "// src/content.md\n# 欢迎使用自定义Loader\n\n这是一个**Markdown**文件，将被我们的自定义Loader转换为HTML。\n\n## 功能特性\n\n- ✅ 支持GitHub风格Markdown\n- ✅ 可配置选项\n- ✅ 错误处理\n\n```javascript\n// 示例代码\nconst html = require('./content.md');\nconsole.log(html);\n```",
          "explanation": "这个Markdown文件将用来测试markdown-loader"
        },
        {
          "step": 2,
          "action": "在主文件中使用自定义Loader",
          "code": "// src/index.js\nimport markdownContent from './content.md';\n\n// 使用转换后的HTML内容\ndocument.getElementById('content').innerHTML = markdownContent;\n\nconsole.log('Markdown转换结果:', markdownContent);",
          "explanation": "直接导入Markdown文件，获得转换后的HTML"
        }
      ],
      "testingBenefits": {
        "功能验证": "确保Loader按预期工作",
        "选项测试": "验证不同选项的效果",
        "错误处理": "测试异常情况的处理",
        "性能评估": "检查Loader的性能影响"
      },
      "expectedResult": "构建成功，Markdown内容正确转换为HTML并显示",
      "validation": {
        "type": "build-success",
        "command": "npm run build"
      }
    },
    {
      "id": "add-loader-options-validation",
      "title": "✅ 任务4：添加选项验证",
      "description": "使用schema-utils为Loader添加选项验证，提供更好的开发体验。",
      "specificSteps": [
        {
          "step": 1,
          "action": "为markdown-loader添加选项验证",
          "code": "const marked = require('marked');\nconst loaderUtils = require('loader-utils');\nconst { validate } = require('schema-utils');\n\n// 选项验证schema\nconst schema = {\n  type: 'object',\n  properties: {\n    breaks: {\n      type: 'boolean',\n      description: '是否将换行符转换为<br>标签'\n    },\n    sanitize: {\n      type: 'boolean',\n      description: '是否清理HTML标签'\n    }\n  },\n  additionalProperties: false\n};\n\nmodule.exports = function(source) {\n  const options = loaderUtils.getOptions(this) || {};\n  \n  // 验证选项\n  validate(schema, options, {\n    name: 'Markdown Loader',\n    baseDataPath: 'options'\n  });\n  \n  // ... 其余代码保持不变\n};",
          "explanation": "添加选项验证可以在配置错误时提供清晰的错误信息"
        }
      ],
      "validationBenefits": {
        "类型检查": "确保选项类型正确",
        "错误提示": "提供清晰的配置错误信息",
        "文档化": "schema本身就是选项的文档",
        "IDE支持": "支持IDE的自动补全和提示"
      },
      "expectedResult": "配置错误时会显示清晰的错误信息",
      "validation": {
        "type": "file-content",
        "file": "loaders/markdown-loader.js",
        "contains": "schema-utils"
      }
    }
  ],
  "progressiveHints": [
    {
      "attempt": 1,
      "hint": "🔧 **第一个提示**：Loader就是一个函数，接收源码，返回转换后的代码：\n\n```javascript\n// loaders/markdown-loader.js\nmodule.exports = function(source) {\n  // 转换逻辑\n  const result = transform(source);\n  return `export default ${JSON.stringify(result)};`;\n};\n```"
    },
    {
      "attempt": 2,
      "hint": "📝 **第二个提示**：使用marked库转换Markdown：\n\n```javascript\nconst marked = require('marked');\nconst loaderUtils = require('loader-utils');\n\nmodule.exports = function(source) {\n  const options = loaderUtils.getOptions(this) || {};\n  const html = marked(source, options);\n  return `export default ${JSON.stringify(html)};`;\n};\n```"
    },
    {
      "attempt": 3,
      "hint": "🎯 **完整的Loader开发模板**：\n\n```javascript\n// 同步Loader\nconst marked = require('marked');\nconst loaderUtils = require('loader-utils');\n\nmodule.exports = function(source) {\n  const options = loaderUtils.getOptions(this) || {};\n  const html = marked(source, { gfm: true, ...options });\n  return `export default ${JSON.stringify(html)};`;\n};\n\n// 异步Loader\nmodule.exports = function(source) {\n  const callback = this.async();\n  const options = loaderUtils.getOptions(this) || {};\n  \n  // 异步处理\n  setTimeout(() => {\n    const result = processSource(source, options);\n    callback(null, result);\n  }, 0);\n};\n```"
    }
  ],
  "solution": {
    "loaders/markdown-loader.js": "const marked = require('marked');\nconst loaderUtils = require('loader-utils');\nconst { validate } = require('schema-utils');\n\n// 选项验证schema\nconst schema = {\n  type: 'object',\n  properties: {\n    breaks: {\n      type: 'boolean',\n      description: '是否将换行符转换为<br>标签'\n    },\n    sanitize: {\n      type: 'boolean', \n      description: '是否清理HTML标签'\n    },\n    gfm: {\n      type: 'boolean',\n      description: '是否启用GitHub风格Markdown'\n    }\n  },\n  additionalProperties: false\n};\n\n/**\n * Markdown Loader - 将Markdown文件转换为HTML字符串\n * @param {string} source - Markdown源码\n * @returns {string} - JavaScript模块代码\n */\nmodule.exports = function(source) {\n  // 获取loader选项\n  const options = loaderUtils.getOptions(this) || {};\n  \n  // 验证选项\n  validate(schema, options, {\n    name: 'Markdown Loader',\n    baseDataPath: 'options'\n  });\n  \n  // 配置marked选项\n  const markedOptions = {\n    gfm: options.gfm !== false, // 默认启用GitHub风格\n    breaks: options.breaks || false,\n    sanitize: options.sanitize || false,\n    highlight: function(code, lang) {\n      // 可以集成代码高亮库\n      return code;\n    }\n  };\n  \n  try {\n    // 转换Markdown为HTML\n    const html = marked(source, markedOptions);\n    \n    // 返回JavaScript模块代码\n    return `export default ${JSON.stringify(html)};`;\n  } catch (error) {\n    // 抛出转换错误\n    this.emitError(new Error(`Markdown转换失败: ${error.message}`));\n    return `export default '';`;\n  }\n};",
    "loaders/banner-loader.js": "const loaderUtils = require('loader-utils');\nconst fs = require('fs');\nconst path = require('path');\n\n/**\n * Banner Loader - 为文件添加头部注释\n * @param {string} source - 源文件内容\n */\nmodule.exports = function(source) {\n  // 标记为异步Loader\n  const callback = this.async();\n  \n  // 获取选项\n  const options = loaderUtils.getOptions(this) || {};\n  \n  // 生成默认banner\n  const generateDefaultBanner = () => {\n    const now = new Date();\n    const fileName = path.basename(this.resourcePath);\n    \n    return `/**\n * File: ${fileName}\n * Generated: ${now.toISOString()}\n * Build: ${process.env.NODE_ENV || 'development'}\n */\n\n`;\n  };\n  \n  // 如果指定了banner文件，异步读取\n  if (options.bannerFile) {\n    const bannerPath = path.resolve(this.context, options.bannerFile);\n    \n    // 添加文件依赖，文件变化时重新构建\n    this.addDependency(bannerPath);\n    \n    fs.readFile(bannerPath, 'utf8', (err, bannerContent) => {\n      if (err) {\n        this.emitWarning(new Error(`无法读取banner文件: ${bannerPath}`));\n        const defaultBanner = generateDefaultBanner();\n        return callback(null, defaultBanner + source);\n      }\n      \n      const result = bannerContent + '\\n\\n' + source;\n      callback(null, result);\n    });\n  } else {\n    // 使用选项中的banner或默认banner\n    const banner = options.banner || generateDefaultBanner();\n    const result = banner + source;\n    callback(null, result);\n  }\n};\n\n// 标记为raw loader（如果需要处理二进制文件）\n// module.exports.raw = true;",
    "webpack.config.js": "const path = require('path');\nconst HtmlWebpackPlugin = require('html-webpack-plugin');\n\nmodule.exports = {\n  entry: './src/index.js',\n  output: {\n    path: path.resolve(__dirname, 'dist'),\n    filename: '[name].[contenthash].js',\n    clean: true\n  },\n  mode: 'development',\n  devtool: 'source-map',\n  \n  module: {\n    rules: [\n      // Markdown文件处理\n      {\n        test: /\\.md$/,\n        use: {\n          loader: './loaders/markdown-loader.js',\n          options: {\n            breaks: true,\n            gfm: true,\n            sanitize: false\n          }\n        }\n      },\n      // JavaScript文件处理（添加banner）\n      {\n        test: /\\.js$/,\n        exclude: /node_modules/,\n        use: [\n          {\n            loader: './loaders/banner-loader.js',\n            options: {\n              banner: '/* Copyright 2024 My Company. All rights reserved. */\\n'\n              // bannerFile: './banner.txt' // 可选：从文件读取\n            }\n          }\n        ]\n      }\n    ]\n  },\n  \n  plugins: [\n    new HtmlWebpackPlugin({\n      template: './src/index.html',\n      title: '自定义Loader示例'\n    })\n  ]\n};"
  },
  "resources": [
    {
      "title": "编写 Loader",
      "url": "https://webpack.js.org/contribute/writing-a-loader/"
    },
    {
      "title": "Loader API",
      "url": "https://webpack.js.org/api/loaders/"
    }
  ]
}