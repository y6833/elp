{
  "id": "vite-testing",
  "title": "🧪 Vite + Vitest 测试环境搭建",
  "description": "测试是保证代码质量的重要手段！这一关将教你在Vite项目中配置Vitest测试框架，包括单元测试、组件测试和覆盖率报告。Vitest是专为Vite设计的测试框架，配置简单、运行快速，是现代前端项目的最佳选择。",
  "difficulty": "中级",
  "estimatedTime": "30分钟",
  "category": "vite",
  "prerequisites": ["vite-basic"],
  "scenario": "你的React项目已经开发了一段时间，但还没有测试覆盖。为了保证代码质量和重构安全，你需要搭建完整的测试环境。包括单元测试、组件测试，以及生成覆盖率报告来了解测试覆盖情况。",
  "learningObjectives": [
    "🔧 配置Vitest测试框架，享受与Vite的完美集成",
    "📊 设置测试覆盖率报告，量化测试质量",
    "🧩 配置React组件测试环境，包括jsdom和testing-library",
    "⚡ 优化测试配置，提升测试运行效率"
  ],
  "tasks": [
    {
      "id": "basic-vitest-config",
      "title": "🏗️ 第一步：基础Vitest配置",
      "description": "在vite.config.js中添加Vitest的基本配置。Vitest可以复用Vite的配置，这是它相比其他测试框架的一大优势。",
      "detailedInstructions": [
        "在vite.config.js中添加test配置对象",
        "设置globals: true（全局使用describe、it等函数，无需导入）",
        "设置environment: 'jsdom'（模拟浏览器环境，用于组件测试）",
        "配置setupFiles指向测试设置文件",
        "设置include匹配测试文件模式"
      ],
      "validation": {
        "type": "file-content",
        "file": "vite.config.js",
        "contains": "test:"
      }
    },
    {
      "id": "coverage-configuration",
      "title": "📊 第二步：配置覆盖率报告",
      "description": "配置测试覆盖率报告，让你清楚地了解哪些代码被测试覆盖了，哪些还需要补充测试。这对于保证代码质量非常重要。",
      "detailedInstructions": [
        "在test配置中添加coverage对象",
        "设置provider: 'v8'（使用V8引擎的覆盖率收集）",
        "配置reporter: ['text', 'json', 'html']（多种格式的报告）",
        "设置exclude数组，排除不需要测试的文件（如node_modules、配置文件等）",
        "这样运行npm run test:coverage就能生成覆盖率报告"
      ],
      "validation": {
        "type": "file-content",
        "file": "vite.config.js",
        "contains": "coverage"
      }
    },
    {
      "id": "optimize-test-config",
      "title": "⚡ 第三步：优化测试配置",
      "description": "进一步优化测试配置，包括并发执行、超时设置等，让测试运行更快更稳定。",
      "detailedInstructions": [
        "设置threads: true（启用多线程并发测试）",
        "配置testTimeout: 10000（设置测试超时时间）",
        "设置watch: false（默认不启用监听模式）",
        "在build配置中添加sourcemap: true（便于调试测试）",
        "配置rollupOptions.output.manualChunks优化构建"
      ],
      "validation": {
        "type": "file-content",
        "file": "vite.config.js",
        "contains": "threads"
      }
    }
  ],
  "progressiveHints": [
    {
      "attempt": 1,
      "hint": "🧪 **第一次提示**：Vitest配置在vite.config.js的test字段中。从基础配置开始：`test: { globals: true, environment: 'jsdom' }`"
    },
    {
      "attempt": 2,
      "hint": "📈 **第二次提示**：覆盖率配置是test.coverage对象。你需要设置：\n- provider: 'v8'\n- reporter: ['text', 'json', 'html']\n- exclude: ['node_modules/', 'src/test/', '**/*.config.js']"
    },
    {
      "attempt": 3,
      "hint": "🚀 **第三次提示**：完整的测试配置包括：\n1. 基础配置：globals, environment, setupFiles\n2. 覆盖率：coverage对象配置\n3. 性能优化：threads, testTimeout\n4. 文件匹配：include模式\n\n别忘了在顶部导入：`import { defineConfig } from 'vite'`"
    }
  ],
  "resources": [
    {
      "title": "Vitest 官方文档",
      "url": "https://vitest.dev/"
    }
  ],
  "solution": {
    "vite.config.js": "import { defineConfig } from 'vite'\nimport react from '@vitejs/plugin-react'\n\nexport default defineConfig({\n  plugins: [react()],\n  \n  // 测试配置\n  test: {\n    globals: true,\n    environment: 'jsdom',\n    setupFiles: './src/test/setup.js',\n    \n    // 覆盖率配置\n    coverage: {\n      provider: 'v8',\n      reporter: ['text', 'json', 'html'],\n      exclude: [\n        'node_modules/',\n        'src/test/',\n        '**/*.d.ts',\n        '**/*.config.js'\n      ]\n    },\n    \n    // 测试文件匹配模式\n    include: ['src/**/*.{test,spec}.{js,jsx,ts,tsx}'],\n    \n    // 监听模式配置\n    watch: false,\n    \n    // 并发测试\n    threads: true,\n    \n    // 测试超时\n    testTimeout: 10000,\n  },\n  \n  // 构建配置\n  build: {\n    sourcemap: true,\n    rollupOptions: {\n      output: {\n        manualChunks: {\n          vendor: ['react', 'react-dom'],\n          testing: ['@testing-library/react', '@testing-library/jest-dom']\n        }\n      }\n    }\n  },\n  \n  // 开发服务器配置\n  server: {\n    port: 3000,\n    open: true\n  }\n})",
    "src/test/setup.js": "import '@testing-library/jest-dom'\n\n// 全局测试设置\nglobal.ResizeObserver = class ResizeObserver {\n  constructor(cb) {\n    this.cb = cb;\n  }\n  observe() {\n    this.cb([{ borderBoxSize: { inlineSize: 0, blockSize: 0 } }], this);\n  }\n  unobserve() {}\n  disconnect() {}\n};\n\n// Mock window.matchMedia\nObject.defineProperty(window, 'matchMedia', {\n  writable: true,\n  value: jest.fn().mockImplementation(query => ({\n    matches: false,\n    media: query,\n    onchange: null,\n    addListener: jest.fn(),\n    removeListener: jest.fn(),\n    addEventListener: jest.fn(),\n    removeEventListener: jest.fn(),\n    dispatchEvent: jest.fn(),\n  })),\n});"
  }
}