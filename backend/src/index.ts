import Fastify from 'fastify'
import { TypeBoxTypeProvider } from '@fastify/type-provider-typebox'
import fastifyCors from '@fastify/cors'
import fastifyHelmet from '@fastify/helmet'
import fastifyRateLimit from '@fastify/rate-limit'
import fastifyJwt from '@fastify/jwt'
import fastifyCookie from '@fastify/cookie'
import fastifyMultipart from '@fastify/multipart'
import fastifyStatic from '@fastify/static'
import fastifySwagger from '@fastify/swagger'
import fastifySwaggerUi from '@fastify/swagger-ui'
import { PrismaClient } from '@prisma/client'
import Redis from 'redis'
import path from 'path'
import { fileURLToPath } from 'url'
import { config } from './config/index.js'
import { logger } from './utils/logger.js'
import { errorHandler } from './utils/errorHandler.js'
import { authRoutes } from './routes/auth.js'
import { levelRoutes } from './routes/levels.js'
import { userRoutes } from './routes/users.js'
import { progressRoutes } from './routes/progress.js'
import { achievementRoutes } from './routes/achievements.js'
import { communityRoutes } from './routes/community.js'
import { adminRoutes } from './routes/admin.js'
import { registerAIAssistantRoutes } from './services/ai-assistant.js'
import { registerAdaptiveDifficultyRoutes } from './services/adaptive-difficulty.js'
import { registerProgressAnalyticsRoutes } from './services/progress-analytics.js'

const __filename = fileURLToPath(import.meta.url)
const __dirname = path.dirname(__filename)

// ÂàõÂª∫FastifyÂÆû‰æã
export const fastify = Fastify({
  logger: {
    level: config.LOG_LEVEL,
    transport: config.NODE_ENV === 'development' ? {
      target: 'pino-pretty',
      options: {
        colorize: true,
        translateTime: 'HH:MM:ss Z',
        ignore: 'pid,hostname'
      }
    } : undefined
  }
}).withTypeProvider<TypeBoxTypeProvider>()

// Êï∞ÊçÆÂ∫ìËøûÊé•
export const prisma = new PrismaClient({
  log: config.NODE_ENV === 'development' ? ['query', 'info', 'warn', 'error'] : ['error']
})

// RedisËøûÊé•
export const redis = Redis.createClient({
  url: config.REDIS_URL,
  socket: {
    reconnectStrategy: (retries) => Math.min(retries * 50, 500)
  }
})

// ÂÖ®Â±ÄÈîôËØØÂ§ÑÁêÜ
fastify.setErrorHandler(errorHandler)

// Ê≥®ÂÜåÊèí‰ª∂
async function registerPlugins() {
  // ÂÆâÂÖ®Áõ∏ÂÖ≥
  await fastify.register(fastifyHelmet, {
    contentSecurityPolicy: {
      directives: {
        defaultSrc: ["'self'"],
        styleSrc: ["'self'", "'unsafe-inline'", "https:"],
        scriptSrc: ["'self'", "https:"],
        imgSrc: ["'self'", "data:", "https:"],
        connectSrc: ["'self'", "https:"],
        fontSrc: ["'self'", "https:", "data:"],
        objectSrc: ["'none'"],
        mediaSrc: ["'self'"],
        frameSrc: ["'none'"]
      }
    }
  })

  // CORSÈÖçÁΩÆ
  await fastify.register(fastifyCors, {
    origin: config.NODE_ENV === 'production' 
      ? [config.FRONTEND_URL] 
      : true,
    credentials: true,
    methods: ['GET', 'POST', 'PUT', 'DELETE', 'PATCH', 'OPTIONS']
  })

  // ÈÄüÁéáÈôêÂà∂
  await fastify.register(fastifyRateLimit, {
    max: config.RATE_LIMIT_MAX,
    timeWindow: config.RATE_LIMIT_WINDOW,
    skipOnError: true,
    errorResponseBuilder: (request, context) => ({
      statusCode: 429,
      error: 'Too Many Requests',
      message: `Rate limit exceeded, retry in ${Math.round(context.ttl / 1000)} seconds`
    })
  })

  // JWTËÆ§ËØÅ
  await fastify.register(fastifyJwt, {
    secret: config.JWT_SECRET,
    cookie: {
      cookieName: 'token',
      signed: false
    },
    sign: {
      expiresIn: config.JWT_EXPIRES_IN
    }
  })

  // CookieÊîØÊåÅ
  await fastify.register(fastifyCookie, {
    secret: config.COOKIE_SECRET
  })

  // Êñá‰ª∂‰∏ä‰º†
  await fastify.register(fastifyMultipart, {
    limits: {
      fileSize: 10 * 1024 * 1024, // 10MB
      files: 5
    }
  })

  // ÈùôÊÄÅÊñá‰ª∂ÊúçÂä°
  await fastify.register(fastifyStatic, {
    root: path.join(__dirname, '../uploads'),
    prefix: '/uploads/'
  })

  // APIÊñáÊ°£
  await fastify.register(fastifySwagger, {
    swagger: {
      info: {
        title: 'ELP API',
        description: 'ELP ÂâçÁ´ØÂ∑•Á®ãÂåñÂ≠¶‰π†Âπ≥Âè∞ API ÊñáÊ°£',
        version: '2.0.0'
      },
      host: config.API_HOST,
      schemes: [config.NODE_ENV === 'production' ? 'https' : 'http'],
      consumes: ['application/json', 'multipart/form-data'],
      produces: ['application/json'],
      securityDefinitions: {
        Bearer: {
          type: 'apiKey',
          name: 'Authorization',
          in: 'header',
          description: 'Bearer JWT token'
        }
      }
    }
  })

  await fastify.register(fastifySwaggerUi, {
    routePrefix: '/docs',
    uiConfig: {
      docExpansion: 'list',
      deepLinking: false
    }
  })
}

// Ê≥®ÂÜåË∑ØÁî±
async function registerRoutes() {
  // APIË∑ØÁî±ÂâçÁºÄ
  await fastify.register(async function (fastify) {
    // ÂÅ•Â∫∑Ê£ÄÊü•
    fastify.get('/health', async () => {
      return {
        status: 'ok',
        timestamp: new Date().toISOString(),
        version: process.env.npm_package_version || '2.0.0',
        environment: config.NODE_ENV
      }
    })

    // ËÆ§ËØÅË∑ØÁî±
    await fastify.register(authRoutes, { prefix: '/auth' })
    
    // Áî®Êà∑Ë∑ØÁî±
    await fastify.register(userRoutes, { prefix: '/users' })
    
    // ÂÖ≥Âç°Ë∑ØÁî±
    await fastify.register(levelRoutes, { prefix: '/levels' })
    
    // ËøõÂ∫¶Ë∑ØÁî±
    await fastify.register(progressRoutes, { prefix: '/progress' })
    
    // ÊàêÂ∞±Ë∑ØÁî±
    await fastify.register(achievementRoutes, { prefix: '/achievements' })
    
    // Á§æÂå∫Ë∑ØÁî±
    await fastify.register(communityRoutes, { prefix: '/community' })
    
    // ÁÆ°ÁêÜÂëòË∑ØÁî±
    await fastify.register(adminRoutes, { prefix: '/admin' })
    
    // AIÂä©ÊâãË∑ØÁî±
    await registerAIAssistantRoutes(fastify)
    
    // Ëá™ÈÄÇÂ∫îÈöæÂ∫¶Ë∑ØÁî±
    await registerAdaptiveDifficultyRoutes(fastify)
    
    // ËøõÂ∫¶ÂàÜÊûêË∑ØÁî±
    await registerProgressAnalyticsRoutes(fastify)
  }, { prefix: '/api' })
}

// Êï∞ÊçÆÂ∫ìËøûÊé•Èí©Â≠ê
fastify.addHook('onReady', async () => {
  try {
    await prisma.$connect()
    fastify.log.info('Êï∞ÊçÆÂ∫ìËøûÊé•ÊàêÂäü')
  } catch (error) {
    fastify.log.error('Êï∞ÊçÆÂ∫ìËøûÊé•Â§±Ë¥•:', error)
    throw error
  }
})

// RedisËøûÊé•Èí©Â≠ê
fastify.addHook('onReady', async () => {
  try {
    await redis.connect()
    fastify.log.info('RedisËøûÊé•ÊàêÂäü')
  } catch (error) {
    fastify.log.error('RedisËøûÊé•Â§±Ë¥•:', error)
    throw error
  }
})

// ‰ºòÈõÖÂÖ≥Èó≠
fastify.addHook('onClose', async () => {
  await prisma.$disconnect()
  await redis.disconnect()
  fastify.log.info('ÊúçÂä°Âô®‰ºòÈõÖÂÖ≥Èó≠')
})

// ÂêØÂä®ÊúçÂä°Âô®
async function start() {
  try {
    // Ê≥®ÂÜåÊèí‰ª∂ÂíåË∑ØÁî±
    await registerPlugins()
    await registerRoutes()

    // ÂêØÂä®ÊúçÂä°Âô®
    const address = await fastify.listen({
      port: config.PORT,
      host: config.HOST
    })

    fastify.log.info(`üöÄ ELPÂêéÁ´ØÊúçÂä°ÂêØÂä®ÊàêÂäüÔºÅ`)
    fastify.log.info(`üìç ÊúçÂä°Âú∞ÂùÄ: ${address}`)
    fastify.log.info(`üìö APIÊñáÊ°£: ${address}/docs`)
    fastify.log.info(`üåç ÁéØÂ¢É: ${config.NODE_ENV}`)

  } catch (error) {
    fastify.log.error('ÊúçÂä°Âô®ÂêØÂä®Â§±Ë¥•:', error)
    process.exit(1)
  }
}

// Â§ÑÁêÜÊú™ÊçïËé∑ÁöÑÂºÇÂ∏∏
process.on('uncaughtException', (error) => {
  fastify.log.error('Êú™ÊçïËé∑ÁöÑÂºÇÂ∏∏:', error)
  process.exit(1)
})

process.on('unhandledRejection', (reason) => {
  fastify.log.error('Êú™Â§ÑÁêÜÁöÑPromiseÊãíÁªù:', reason)
  process.exit(1)
})

// Â§ÑÁêÜËøõÁ®ã‰ø°Âè∑
const gracefulShutdown = async (signal: string) => {
  fastify.log.info(`Êî∂Âà∞ ${signal} ‰ø°Âè∑ÔºåÂºÄÂßã‰ºòÈõÖÂÖ≥Èó≠...`)
  
  try {
    await fastify.close()
    fastify.log.info('ÊúçÂä°Âô®Â∑≤‰ºòÈõÖÂÖ≥Èó≠')
    process.exit(0)
  } catch (error) {
    fastify.log.error('ÂÖ≥Èó≠ÊúçÂä°Âô®Êó∂Âá∫Èîô:', error)
    process.exit(1)
  }
}

process.on('SIGTERM', () => gracefulShutdown('SIGTERM'))
process.on('SIGINT', () => gracefulShutdown('SIGINT'))

// ÂêØÂä®Â∫îÁî®
if (import.meta.url === `file://${process.argv[1]}`) {
  start()
}

export default fastify